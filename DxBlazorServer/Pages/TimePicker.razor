@page "/timepicker"
@using System.Globalization

<h3>TimePicker</h3>

<DxFormLayout>
    <DxFormLayoutItem Caption="Entry" ColSpanMd="6">
        <DxTimeEdit Time="@EntryTime"
                    Mask="@DateTimeMask.ShortTime"
                    TimeChanged="( (TimeSpan newValue) => OnTimeChanged(newValue, MarkType.ENTRY)  )">
            <DxDateTimeMaskProperties Culture="MaskCultureInfo" CaretMode="MaskCaretMode.Advancing" />
        </DxTimeEdit>
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="Ore di Lavoro" ColSpanMd="6">
        <DxSpinEdit Value="WorkHours" ValueChanged="@((int newValue) => OnValueChanged(newValue))"></DxSpinEdit>
    </DxFormLayoutItem>


    <DxFormLayoutItem Caption="Exit" ColSpanMd="6">
        <DxTimeEdit ReadOnly="true"
                    Mask="@DateTimeMask.ShortTime"
                    Time="@ExitTime">
            <DxDateTimeMaskProperties Culture="MaskCultureInfo" CaretMode="MaskCaretMode.Advancing" />
        </DxTimeEdit>
    </DxFormLayoutItem>
</DxFormLayout>

Entry = <span>@EntryTime</span>
<br />
Exit = <span>@ExitTime</span>
<br />
Delta = <span>@Delta</span>
<br />
Countdown = <span>@CountDown</span>

<button class="btn btn-primary" @onclick="Start">Start CountDown</button>

<button class="btn btn-primary" @onclick="Stop">Stop CountDown</button>
<hr />

@if (CountDown != TimeSpan.Zero)
{
    <h3 class="text-center">@CountDown</h3>
    <h3>@EndCountdownMsg</h3>
}

@code
{
    enum MarkType
    {
        ENTRY,
        EXIT
    }

    public int WorkHours { get; set; } = 8;
    public TimeSpan EntryTime { get; set; } = new TimeSpan(13, 0, 0);
    public TimeSpan ExitTime => EntryTime + new TimeSpan(WorkHours, 0, 0);
    public TimeSpan Delta => ExitTime - EntryTime;
    public TimeSpan CountDown = new TimeSpan();
    public bool RunCountDown { get; set; }
    public TimeSpan MyTimeSpan = new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, 0);
    public string EndCountdownMsg = "";
    CultureInfo MaskCultureInfo = CultureInfo.GetCultureInfo("it-IT");

    protected override void OnInitialized()
    {
        Start();

        base.OnInitialized();
    }

    protected async Task Timer()
    {

        while (RunCountDown && CountDown <= ExitTime)
        {
            await Task.Delay(1000);
            CountDown = CountDown.Subtract(new TimeSpan(0, 0, 1));
            if (CountDown <= TimeSpan.Zero)
            {
                break;
            }
            StateHasChanged();
        }
      

    }
   

    void OnValueChanged(int newValue)
    {
        WorkHours = newValue;
        UpdateCountdown();
    }

    void OnTimeChanged(TimeSpan newValue, MarkType mark)
    {
        switch (mark)
        {
            case MarkType.ENTRY:
                EntryTime = newValue;
                break;

                //...
        }
        UpdateCountdown();
        // SaveDb();
    }

    void UpdateCountdown()
    {
        var now = DateTime.Now;
        CountDown = ExitTime - new TimeSpan(now.Hour, now.Minute, now.Second);
    }

    void Start()
    {
        UpdateCountdown();
        if (!RunCountDown)
        {
            RunCountDown = true;
            Timer();
        }
    }

    void Stop()
    {
        RunCountDown = false;
        CountDown = TimeSpan.Zero;
        StateHasChanged();

    }
}